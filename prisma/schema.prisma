// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @id @default(uuid())
  phoneNumber    String   @unique
  name     String
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refreshToken String?
  answers Answer[] @relation("UserAnswers")
  appearsIn Answer[] @relation("UserAppearsIn")
  friends User[] @relation("Friends")
  friendsOf User[] @relation("Friends")
  sentFriendRequests FriendRequest[] @relation("SentFriendRequest")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequest")
  expoPushToken String?
}

model AnonUser {
  id      String   @id @default(uuid())
  phoneNumber    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  appearsIn Answer[] @relation("AnonUserAppearsIn")
}

enum AnswerType {
  TEXT
  USER
  ANON_USER
}

enum QuestionType {
  TEXT
  USER
}


model FriendRequest{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender User @relation("SentFriendRequest",fields: [senderId], references: [id])
  senderId String
  receiver User @relation("ReceivedFriendRequest",fields: [receiverId], references: [id])
  receiverId String
}


model Answer {
  id        String   @id @default(uuid())
  type      AnswerType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User   @relation("UserAnswers",fields: [userId], references: [id])
  userId    String
  question  Question @relation(fields: [questionId], references: [id])
  questionId String
  textAnswer String?
  userAnswer User? @relation("UserAppearsIn",fields: [userAnswerId], references: [id])
  userAnswerId String?
  anonUserAnswer AnonUser? @relation("AnonUserAppearsIn",fields: [anonUserAnswerId], references: [id])
  anonUserAnswerId String?
  nextAnswer Answer? @relation("AnswerHistory",fields: [nextAnswerId], references: [id])
  nextAnswerId String? @unique
  previousAnswer Answer? @relation("AnswerHistory")
}


model Question {
  id        String   @id @default(uuid())
  type QuestionType
  question String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[]
  responses Int @default(0)
  nextQuestion Question? @relation("QuestionHistory",fields: [nextQuestionId], references: [id])
  nextQuestionId String? @unique
  previousQuestion Question? @relation("QuestionHistory")
}

